'use client';

import React, { createContext, useState, useEffect } from 'react';

// INTERFACES

// USER INTERFACE
interface User {
  id: string;
  email: string;
  name: string;
  role: 'user' | 'admin';
  password?: string; // TODO: IT MUST BE HASHED LATER
}

// CONTEXT
interface UserContextType {
  users: User[];
  currentUser: User | null;
  addUser: (user: Omit<User, 'id'>) => void; // ID IS NOT NEEDED FOR ADDING USER (IT IS GENERATED BY THE SYSTEM)
  updateUser: (id: string, user: Partial<User>) => void; // WE USE PARTIAL USER BECAUSE WE ALLOWED TO UPDATE ONLY SOME OF THE USER'S FIELDS
  deleteUser: (id: string) => void;
  setCurrentUser: (user: User | null) => void;
  logout: () => void;
}

// IMPORTANT: WE MUST USE CONTEXT TO SHARE THE USER DATA BETWEEN THE COMPONENTS
export const UserContext = createContext<UserContextType | undefined>(undefined);

// PROVIDER
export function UserProvider({ children }: { children: React.ReactNode }) { 
  // WE MUST USE PROVIDER TO PROVIDE THE USER DATA TO THE COMPONENTS (WE CANNOT USE CONTEXT DIRECTLY)
  const [users, setUsers] = useState<User[]>([]);
  const [currentUser, setCurrentUser] = useState<User | null>(null);

  // LOAD DATA FROM LOCAL STORAGE
  useEffect(() => {
    const storedUsers = localStorage.getItem('users');
    const storedCurrentUser = localStorage.getItem('currentUser');
    
    if (storedUsers) {
      setUsers(JSON.parse(storedUsers));
    } else {
      // DEFAULT ADMIN USER FOR FIRST TIME
      const defaultAdmin = {
        id: 'admin1',
        email: 'admin@davon.com',
        name: 'Admin',
        role: 'admin' as const,
        password: 'admin123'
      };
      setUsers([defaultAdmin]);
      localStorage.setItem('users', JSON.stringify([defaultAdmin]));
    }
    if (storedCurrentUser) {
      setCurrentUser(JSON.parse(storedCurrentUser));
      }
    }, []); // EMPTY DEPENDENCY ARRAY - IT RUNS ONLY ONCE - BECAUSE LOAD DATA FROM LOCAL STORAGE

  // SAVE DATA TO LOCAL STORAGE
  useEffect(() => {
    if (users.length > 0) { // Only save if there are users
      localStorage.setItem('users', JSON.stringify(users));
    }
  }, [users]);

  useEffect(() => {
    localStorage.setItem('currentUser', JSON.stringify(currentUser));
  }, [currentUser]);

  //METHODS

  // ADD USER
  const addUser = (user: Omit<User, 'id'>) => {
    const newUser = {
      ...user,
      id: Math.random().toString(36).substr(2, 9),
    };
    setUsers([...users, newUser]);
  };

  // UPDATE USER
  const updateUser = (id: string, updatedUser: Partial<User>) => {
    console.log('Güncellenmiş kullanıcı:', { id, ...updatedUser });
    const updatedUsers = users.map(user => {
      if (user.id === id) {
        return { ...user, ...updatedUser };
      }
      return user;
    });
    setUsers(updatedUsers);
  };

  // DELETE USER
  const deleteUser = (id: string) => {
    const deletedUser = users.find(user => user.id === id);
    console.log('Silinen kullanıcı:', deletedUser);
    setUsers(users.filter(user => user.id !== id));
  };

  // LOGOUT
  const logout = () => {
    setCurrentUser(null);
    localStorage.removeItem('currentUser');
  };

  return (
    <UserContext.Provider value={{
      users,
      currentUser,
      addUser,
      updateUser,
      deleteUser,
      setCurrentUser,
      logout,
    }}>
      {children}
    </UserContext.Provider>
  );
} 